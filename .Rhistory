names_to = c(".value", "Timepoint"), # Extraemos los metabolitos como columnas y establecemos timepoints como nueva columna.
names_sep = "_T" # Establecemos el separador entre el nombre del metabolito y el timepoint.
) %>%
# Especificamos como queremos que se muestren los timepoints.
mutate(Timepoint = paste0("T", Timepoint)) %>%
filter(!Timepoint == "TNA") # Eliminamos las filas que se nos han creado por error que están completamente vacías.
# Ahora modificamos el metadata para adecuarlo a las nuevas variables.
# Primero añadimos la nueva fila de timepoints creando un nuevo df.
metadata_timepoints <- data.frame(
VarName = "Timepoint",
varTpe = "character",
Description= "Punto temporal de recogida de muestra del paciente (0, 2, 4 o 5)"
)
# Ahora modificamos las variables del metadata eliminando "_TX" del final y eliminamos variables repetidas.
metadata_metabolites <- metadata_mod %>%
mutate(VarName = gsub("_T[0-5]$", "", VarName)) %>% # Buscamos y eliminamos el "_TX" del final.
distinct(VarName, .keep_all = TRUE)  # Quitamos las variables repetidas.
# Finalmente unimos los dos dfs con rbind intentando poner a la variable timepoints como sexta de la lista (porque es la posición que ocupa como columna en el otro documento).
metadata_samples <- rbind(metadata_timepoints, metadata_metabolites)
dim(metadata_samples)
dim(data_values_samples)
View(metadata_samples)
# Seleccionamos las variables experimentales (a partir de la variable 7 hasta el final) y creamos una matriz transpuesta, ya que las filas deben ser las variables y las columnas deben ser las distintas muestras.
metabolite_data <- t(as.matrix(data_values_samples[, 7:ncol(data_values_samples)]))
# Creamos rowData a partir de la información de la metadata para especificar la información de las variables experimentales.
rowData <- metadata_samples[7:nrow(metadata_samples), ]
# Seleccionamos ahora las variables de identificación de los pacientes.
colData <- data_values_samples[, 1:6]
# Ahora que ya lo tenemos preparado, creamos el objeto SummarizedExperiment.
sum_exp_object <- SummarizedExperiment(
assays = list(counts = metabolite_data),
rowData = rowData,
colData = colData
)
# Finalmente vemos qué pinta tiene el objeto creado.
sum_exp_object
# Seleccionamos las variables experimentales (a partir de la variable 7 hasta el final) y creamos una matriz transpuesta, ya que las filas deben ser las variables y las columnas deben ser las distintas muestras.
metabolite_data <- t(as.matrix(data_values_samples[, 7:ncol(data_values_samples)]))
# Creamos rowData a partir de la información de la metadata para especificar la información de las variables experimentales.
rowData <- metadata_samples[7:nrow(metadata_samples), ]
# Seleccionamos ahora las variables de identificación de los pacientes.
colData <- data_values_samples[, 1:6]
# Ahora que ya lo tenemos preparado, creamos el objeto SummarizedExperiment.
sum_exp_object <- SummarizedExperiment(
assays = list(counts = metabolite_data),
rowData = rowData,
colData = colData
)
# Finalmente vemos qué pinta tiene el objeto creado.
sum_exp_object
# Vemos que es un objeto con 174 filas (variables experimentales de metabolitos) y 156 columnas, que son las muestras (4 para cada paciente, ya que son 4 timepoints). Se puede estudiar un poco más el objeto con:
assay(sum_exp_object) # Devuelve la matriz principal de datos.
rowData(sum_exp_object) # Devuelve un df con información sobre las filas de la matriz anterior.
colData(sum_exp_object) # Devuelve un df con información sobre la metadata de las columnas.
# Seleccionamos las variables experimentales (a partir de la variable 7 hasta el final) y creamos una matriz transpuesta, ya que las filas deben ser las variables y las columnas deben ser las distintas muestras.
metabolite_data <- t(as.matrix(data_values_samples[, 7:ncol(data_values_samples)]))
# Creamos rowData a partir de la información de la metadata para especificar la información de las variables experimentales.
rowData <- metadata_samples[7:nrow(metadata_samples), ]
# Seleccionamos ahora las variables de identificación de los pacientes.
colData <- data_values_samples[, 1:6]
# Ahora que ya lo tenemos preparado, creamos el objeto SummarizedExperiment.
sum_exp_object <- SummarizedExperiment(
assays = list(counts = metabolite_data),
rowData = rowData,
colData = colData
)
# Finalmente vemos qué pinta tiene el objeto creado.
sum_exp_object
# Vemos que es un objeto con 174 filas (variables experimentales de metabolitos) y 156 columnas, que son las muestras (4 para cada paciente, ya que son 4 timepoints). Se puede estudiar un poco más el objeto con las siguientes funciones:
assay(sum_exp_object) # Devuelve la matriz principal de datos.
rowData(sum_exp_object) # Devuelve un df con información sobre los metabolitos (filas de la matriz).
colData(sum_exp_object) # Devuelve un df con información sobre las muestras (columnas de la matriz).
# Guardamos el objeto en formato .Rda.
save(sum_exp_object, file = "sum_exp_object.Rda")
# Cogeremos el documento data_values_samples, en el que hemos transformado los datos para que las filas sean las muestras recogidas (y no los pacientes como antes). Verificaremos la estructura del documento.
str(data_values_samples)
# Cogeremos el documento data_values_samples, en el que hemos transformado los datos para que las filas sean las muestras recogidas (y no los pacientes como antes). Verificaremos la estructura del documento.
dim(data_values_samples)
?pivot_longer
summary(data_values_samples)
View(metadata_mod)
data_values_patients <- data_values_samples %>%
```
View(data_values_samples)
data_values_patients <- data_values_samples %>%
select("SUBJECTS", "SURGERY", "AGE", "GENDER", "Group") %>% # Seleccionamos columnas
distinct() # Eliminamos duplicados de pacientes
View(data_values_patients)
nrow(data_values_patients)
colSums(is.na(data_values_samples))
data_values_samples_long <- data_values_samples %>%
pivot_longer(cols = 7:ncol(data_values_samples), names_to = "Metabolito", values_to = "Valor")
ggplot(data_values_samples_long, aes(x = Metabolito, y = Valor)) +
geom_boxplot(outlier.size = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Variabilidad de los Metabolitos por Muestra", x = "Metabolito", y = "Valor")
library(ggplot2)
data_values_samples_long <- data_values_samples %>%
pivot_longer(cols = 7:ncol(data_values_samples), names_to = "Metabolito", values_to = "Valor")
ggplot(data_values_samples_long, aes(x = Metabolito, y = Valor)) +
geom_boxplot(outlier.size = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Variabilidad de los Metabolitos por Muestra", x = "Metabolito", y = "Valor")
str(data_values_patients)
data_values_patients$SURGERY <- factor(data_values_patients$SURGERY)
data_values_patients$GENDER <- factor(data_values_patients$GENDER)
data_values_patients$Group <- factor(data_values_patients$Group)
str(data_values_patients)
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
is.na(data_values_patients)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("SummarizedExperiment", quietly = TRUE)) BiocManager::install("SummarizedExperiment")
library("SummarizedExperiment")
data_values <- read.csv("2018-MetabotypingPaper/DataValues_S013.csv")
metadata <- read.csv("2018-MetabotypingPaper/DataInfo_S013.csv")
#head(data_values)
#head(metadata)
data_values_mod <- data_values[, 2:696]
metadata_mod <- metadata[, 2:4]
if (!requireNamespace("tidyr", quietly = TRUE)) install.packages("tidyr")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library("tidyr")
library("dplyr")
data_values_samples <- data_values_mod %>%
# Hacemos pivot_longer para transformar el df.
pivot_longer(
cols = 6:695, # Seleccionamos las columnas de metabolitos.
names_to = c(".value", "Timepoint"), # Extraemos los metabolitos como
#columnas y establecemos timepoints como nueva columna.
names_sep = "_T" # Establecemos el separador entre el nombre del metabolito
# y el timepoint.
) %>%
# Especificamos como queremos que se muestren los timepoints.
mutate(Timepoint = paste0("T", Timepoint)) %>%
filter(!Timepoint == "TNA") # Eliminamos las filas que se nos han creado por
# error que están completamente vacías.
metadata_timepoints <- data.frame(
VarName = "Timepoint",
varTpe = "character",
Description= "Punto temporal de recogida de muestra del paciente (0, 2, 4 o 5)"
)
metadata_metabolites <- metadata_mod %>%
mutate(VarName = gsub("_T[0-5]$", "", VarName)) %>% # Buscamos y eliminamos el "_TX" del final.
distinct(VarName, .keep_all = TRUE)  # Quitamos las variables repetidas en Varname.
# Finalmente unimos los dos dfs con rbind.
metadata_samples <- rbind(metadata_timepoints, metadata_metabolites)
dim(metadata_samples)
dim(data_values_samples)
metabolite_data <- t(as.matrix(data_values_samples[, 7:ncol(data_values_samples)]))
rowData <- metadata_samples[7:nrow(metadata_samples), ]
colData <- data_values_samples[, 1:6]
sum_exp_object <- SummarizedExperiment(
assays = list(counts = metabolite_data),
rowData = rowData,
colData = colData
)
sum_exp_object
#assay(sum_exp_object) # Devuelve la matriz principal de datos.
#rowData(sum_exp_object) # Devuelve un df con información sobre los metabolitos
#(filas de la matriz).
#colData(sum_exp_object) # Devuelve un df con información sobre las muestras
#(columnas de la matriz).
save(sum_exp_object, file = "sum_exp_object.Rda")
dim(data_values_samples)
#summary(data_values_samples)
colSums(is.na(data_values_samples))
data_values_patients <- data_values_samples %>%
select("SUBJECTS", "SURGERY", "AGE", "GENDER", "Group") %>% # Seleccionamos columnas
distinct() # Eliminamos duplicados de pacientes
nrow(data_values_patients)
data_values_patients$SURGERY <- factor(data_values_patients$SURGERY)
data_values_patients$GENDER <- factor(data_values_patients$GENDER)
data_values_patients$Group <- factor(data_values_patients$Group)
is.na(data_values_patients)
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
# Histograma de la edad
hist(data_values_patients$AGE,
main="Distribución de edades",
col="blue",
xlab="Edad en años")
# Diagrama de barras para el sexo
barplot(table(data_values_patients$SEX),
main="Distribución por sexo",
col="red",
xlab="Sexo")
table(data_values_patients$SEX)
View(data_values_patients)
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
# Histograma de la edad.
hist(data_values_patients$AGE,
main="Distribución de edades",
col="blue",
xlab="Edad en años")
# Diagrama de barras para el género.
barplot(table(data_values_patients$GENDER),
main="Distribución por género",
col="red",
xlab="Género")
# Diagrama de barras para el grupo.
barplot(table(data_values_patients$Group),
main="Distribución por grupo",
col="green",
xlab="Grupo")
# Diagrama de barras para la cirugía.
barplot(table(data_values_patients$SURGERY),
main="Distribución por cirugía",
col="pink",
xlab="Cirugía")
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
# Histograma de la edad.
hist(data_values_patients$AGE,
main="Distribución de edades",
col="blue",
xlab="Edad en años")
# Diagrama de barras para el género.
barplot(table(data_values_patients$GENDER),
main="Distribución por género",
col="red",
xlab="Género")
# Diagrama de barras para el grupo.
barplot(table(data_values_patients$Group),
main="Distribución por grupo",
col="green",
xlab="Grupo")
# Diagrama de barras para la cirugía.
barplot(table(data_values_patients$SURGERY),
main="Distribución por cirugía",
col="pink",
xlab="Cirugía")
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
# Histograma de la edad.
hist(data_values_patients$AGE,
main="Distribución de edades",
col="blue",
xlab="Edad en años")
# Diagrama de barras para el género.
barplot(table(data_values_patients$GENDER),
main="Distribución por género",
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_values_patients$Group),
main="Distribución por grupo",
col="green",
xlab="Grupo",
ylim=c(0,30))
# Diagrama de barras para la cirugía.
barplot(table(data_values_patients$SURGERY),
main="Distribución por cirugía",
col="pink",
xlab="Cirugía",
ylim=c(0,30))
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
# Histograma de la edad.
hist(data_values_patients$AGE,
main="Distribución de edades",
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_values_patients$GENDER),
main="Distribución por género",
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_values_patients$Group),
main="Distribución por grupo",
col="green",
xlab="Grupo",
ylim=c(0,30))
# Diagrama de barras para la cirugía.
barplot(table(data_values_patients$SURGERY),
main="Distribución por cirugía",
col="pink",
xlab="Cirugía",
ylim=c(0,30))
par(mfrow = c(2,2)) # Así podemos ver los 4 gráficos a la vez.
# Histograma de la edad.
hist(data_values_patients$AGE,
main="Distribución de edades",
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_values_patients$GENDER),
main="Distribución por género",
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_values_patients$Group),
main="Distribución por grupo",
col="green",
xlab="Grupo",
ylim=c(0,30))
# Diagrama de barras para la cirugía.
barplot(table(data_values_patients$SURGERY),
main="Distribución por cirugía",
col="pink",
xlab="Cirugía",
ylim=c(0,30))
View(data_values_patients)
View(data_values_patients)
View(data_values)
# Histograma de la edad.
hist(data_values_patients$AGE, data_values_patients$SURGERY
main="Distribución de edades",
par(mfrow = c(2, 3))
for (surgery_status in names(split_data)) {
data_subset <- split_data[[surgery_status]]
# Histograma de la edad.
hist(data_subset$AGE,
main=paste("Distribución de edades (Surgery:", surgery_status, ")"),
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_subset$GENDER),
main=paste("Distribución por género (Surgery:", surgery_status, ")"),
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_subset$Group),
main=paste("Distribución por grupo (Surgery:", surgery_status, ")"),
col="green",
xlab="Grupo",
ylim=c(0,30))
}
split_data <- split(data_values_patients, data_values_patients$SURGERY)
par(mfrow = c(2, 3))
for (surgery_status in names(split_data)) {
data_subset <- split_data[[surgery_status]]
# Histograma de la edad.
hist(data_subset$AGE,
main=paste("Distribución de edades (Surgery:", surgery_status, ")"),
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_subset$GENDER),
main=paste("Distribución por género (Surgery:", surgery_status, ")"),
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_subset$Group),
main=paste("Distribución por grupo (Surgery:", surgery_status, ")"),
col="green",
xlab="Grupo",
ylim=c(0,30))
}
split_data <- split(data_values_patients, data_values_patients$SURGERY)
par(mfrow = c(3, 2))
for (surgery_status in names(split_data)) {
data_subset <- split_data[[surgery_status]]
# Histograma de la edad.
hist(data_subset$AGE,
main=paste("Distribución de edades (Surgery:", surgery_status, ")"),
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_subset$GENDER),
main=paste("Distribución por género (Surgery:", surgery_status, ")"),
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_subset$Group),
main=paste("Distribución por grupo (Surgery:", surgery_status, ")"),
col="green",
xlab="Grupo",
ylim=c(0,30))
}
split_data <- split(data_values_patients, data_values_patients$SURGERY)
par(mfrow = c(2, 3))
for (surgery_status in names(split_data)) {
data_subset <- split_data[[surgery_status]]
# Histograma de la edad.
hist(data_subset$AGE,
main=paste("Distribución de edades (Surgery:", surgery_status, ")"),
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_subset$GENDER),
main=paste("Distribución por género (Surgery:", surgery_status, ")"),
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_subset$Group),
main=paste("Distribución por grupo (Surgery:", surgery_status, ")"),
col="green",
xlab="Grupo",
ylim=c(0,30))
}
# Separamos los datos según la variable SURGERY.
split_data <- split(data_values_patients, data_values_patients$SURGERY)
# Redistribuimos el espacio gráfico.
par(mfrow = c(2, 3))
# Hacemos loop.
for (surgery_status in names(split_data)) {
data_subset <- split_data[[surgery_status]]
# Histograma de la edad.
hist(data_subset$AGE,
main=paste("Edades (", surgery_status, ")"),
col="blue",
xlab="Edad en años",
ylab="Frecuencia")
# Diagrama de barras para el género.
barplot(table(data_subset$GENDER),
main=paste("Género (", surgery_status, ")"),
col="red",
xlab="Género",
ylim=c(0,30))
# Diagrama de barras para el grupo.
barplot(table(data_subset$Group),
main=paste("Grupo (", surgery_status, ")"),
col="green",
xlab="Grupo",
ylim=c(0,30))
}
timepoint_data <- data_values_samples[data_values_samples$Timepoint %in% c(0, 5), ]
View(timepoint_data)
View(data_values_samples)
data_values_timepoints <- data_values_samples[data_values_samples$Timepoint %in% c("T0", "T5"), ]
data_values_difference <- data.frame()
for (patient in unique(data_values_timepoints$SUBJECTS)) {
patient_data <- data_values_timepoints[data_values_timepoints$SUBJECTS == patient, ]
# Solo si hay valores en ambos timepoints.
if (all(c(0, 4) %in% patient_data$Timepoint)) {
# Obtener las filas para timepoint 0 y 5.
tp0 <- patient_data[patient_data$Timepoint == "T0", ]
tp4 <- patient_data[patient_data$Timepoint == "T5", ]
# Calcular las diferencias de cada metabolito entre tp4 y tp0.
diff_row <- tp5
diff_row[ , names(tp5) %in% colnames(data_values_samples)[-(1:3)]] <- tp4[ , -(1:3)] - tp0[ , -(1:3)]
diff_row$Timepoint <- "Difference"
# Añadir a differences_data
differences_data <- rbind(differences_data, diff_row)
}
}
# Comparar diferencias entre tipos de cirugía
# Supongamos que los metabolitos son: Metabolite1, Metabolite2, ..., MetaboliteN
metabolite_columns <- colnames(data_values_samples)[-(1:3)] # Asume que las primeras tres columnas son IDs y Timepoint
for (metabolite in metabolite_columns) {
# Comparación estadística para el metabolito entre tipos de cirugía
bypass_values <- differences_data[differences_data$Surgery_Type == "bypass", metabolite]
tubular_values <- differences_data[differences_data$Surgery_Type == "tubular", metabolite]
# Prueba estadística (ajusta a t-test o Wilcoxon según la distribución de los datos)
test_result <- t.test(bypass_values, tubular_values)
}
for (patient in unique(data_values_timepoints$SUBJECTS)) {
patient_data <- data_values_timepoints[data_values_timepoints$SUBJECTS == patient, ]
# Solo si hay valores en ambos timepoints.
if (all(c(0, 4) %in% patient_data$Timepoint)) {
# Obtener las filas para timepoint 0 y 5.
tp0 <- patient_data[patient_data$Timepoint == "T0", ]
tp4 <- patient_data[patient_data$Timepoint == "T5", ]
# Calcular las diferencias de cada metabolito entre tp4 y tp0.
diff_row <- tp5
diff_row[ , names(tp5) %in% colnames(data_values_samples)[-(1:3)]] <- tp4[ , -(1:3)] - tp0[ , -(1:3)]
diff_row$Timepoint <- "Difference"
# Añadir a data_values_difference
data_values_difference <- rbind(data_values_difference, diff_row)
}
}
# Comparar diferencias entre tipos de cirugía
# Supongamos que los metabolitos son: Metabolite1, Metabolite2, ..., MetaboliteN
metabolite_columns <- colnames(data_values_samples)[-(1:3)] # Asume que las primeras tres columnas son IDs y Timepoint
for (metabolite in metabolite_columns) {
# Comparación estadística para el metabolito entre tipos de cirugía
bypass_values <- data_values_difference[data_values_difference$Surgery_Type == "bypass", metabolite]
tubular_values <- data_values_difference[data_values_difference$Surgery_Type == "tubular", metabolite]
# Prueba estadística (ajusta a t-test o Wilcoxon según la distribución de los datos)
test_result <- t.test(bypass_values, tubular_values)
}
for (patient in unique(data_values_timepoints$SUBJECTS)) {
patient_data <- data_values_timepoints[data_values_timepoints$SUBJECTS == patient, ]
# Solo si hay valores en ambos timepoints.
if (all(c(0, 4) %in% patient_data$Timepoint)) {
# Obtener las filas para timepoint 0 y 5.
tp0 <- patient_data[patient_data$Timepoint == "T0", ]
tp4 <- patient_data[patient_data$Timepoint == "T5", ]
# Calcular las diferencias de cada metabolito entre tp4 y tp0.
diff_row <- tp5
diff_row[ , names(tp5) %in% colnames(data_values_samples)[-(1:3)]] <- tp4[ , -(1:3)] - tp0[ , -(1:3)]
diff_row$Timepoint <- "Difference"
# Añadir a data_values_difference
data_values_difference <- rbind(data_values_difference, diff_row)
}
}
# Comparar diferencias entre tipos de cirugía
# Supongamos que los metabolitos son: Metabolite1, Metabolite2, ..., MetaboliteN
metabolite_columns <- colnames(data_values_samples)[-(1:3)] # Asume que las primeras tres columnas son IDs y Timepoint
for (metabolite in metabolite_columns) {
# Comparación estadística para el metabolito entre tipos de cirugía
bypass_values <- data_values_difference[data_values_difference$Surgery_Type == "bypass", metabolite]
tubular_values <- data_values_difference[data_values_difference$Surgery_Type == "tubular", metabolite]
# Prueba estadística (ajusta a t-test o Wilcoxon según la distribución de los datos)
test_result <- t.test(bypass_values, tubular_values)
}
